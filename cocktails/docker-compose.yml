version: "3.9"
services:
  web:
    build:
      context: .
      dockerfile: docker/server_prod/Dockerfile
    restart: 'always'
    entrypoint: '/entrypoint.sh'
    env_file:
      - .env
    depends_on:
      - db
      - redis
    volumes:
      - media_data:/cocktails/media/
      - tmp_data:/cocktails/tmp/
      - static_data:/cocktails/static/
      - redis_socket:/redis_socket
    ports:
      - "${PORT}:8000"
    networks:
      - cocktails_corp_network

  db:
    image: postgres:15-alpine
    hostname: postgres
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432"
    networks:
      - cocktails_corp_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 50s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    build:
      context: .
      dockerfile: docker/redis/Dockerfile
    command:
      - /var/lib/redis/redis.conf
    restart: always
    volumes:
      - ./docker/redis/redis.conf:/var/lib/redis/redis.conf:ro
      - redis_data:/data
      - redis_socket:/redis_socket
    networks:
      - cocktails_corp_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1m20s
      timeout: 5s
      retries: 3

  celery:
    build:
      context: .
      dockerfile: docker/server_prod/Dockerfile
    command: celery -A cocktails worker -l info --beat --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - redis_socket:/redis_socket
      - media_data:/cocktails/media/
      - tmp_data:/cocktails/tmp/
    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - cocktails_corp_network


networks:
  cocktails_corp_network:

volumes:
  postgres_data:
  static_data:
  media_data:
  tmp_data:
  redis_data:
  redis_socket:
